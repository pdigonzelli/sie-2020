&ANALYZE-SUSPEND _VERSION-NUMBER AB_v9r12 GUI ADM2
&ANALYZE-RESUME
/* Connected Databases 
          general         PROGRESS
*/
&Scoped-define WINDOW-NAME CURRENT-WINDOW
{adecomm/appserv.i}
DEFINE VARIABLE h_asindustria              AS HANDLE          NO-UNDO.
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS dTables 
/*------------------------------------------------------------------------

  File:  

  Description: from DATA.W - Template For SmartData objects in the ADM

  Input Parameters:
      <none>

  Output Parameters:
      <none>

  Modified:     February 24, 1999
------------------------------------------------------------------------*/
/*          This .W file was created with the Progress AppBuilder.      */
/*----------------------------------------------------------------------*/

/* Create an unnamed pool to store all the widgets created 
     by this procedure. This is a good default which assures
     that this procedure's triggers and internal procedures 
     will execute in this procedure's storage, and that proper
     cleanup will occur on deletion of the procedure. */

CREATE WIDGET-POOL.

/* ***************************  Definitions  ************************** */

/* Parameters Definitions ---                                           */

/* Local Variable Definitions ---                                       */

{adm2/support/customColors.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE SmartDataObject
&Scoped-define DB-AWARE yes

&Scoped-define ADM-SUPPORTED-LINKS Data-Source,Data-Target,Navigation-Target,Update-Target,Commit-Target,Filter-Target


/* Db-Required definitions. */
&IF DEFINED(DB-REQUIRED) = 0 &THEN
    &GLOBAL-DEFINE DB-REQUIRED TRUE
&ENDIF
&GLOBAL-DEFINE DB-REQUIRED-START   &IF {&DB-REQUIRED} &THEN
&GLOBAL-DEFINE DB-REQUIRED-END     &ENDIF

&Scoped-define QUERY-NAME Query-Main

/* Internal Tables (found by Frame, Query & Browse Queries)             */
&Scoped-define INTERNAL-TABLES gastos_orden_entrega

/* Definitions for QUERY Query-Main                                     */
&Scoped-Define ENABLED-FIELDS  id_gasto id_orden_entrega importe
&Scoped-define ENABLED-FIELDS-IN-gastos_orden_entrega id_gasto ~
id_orden_entrega importe 
&Scoped-Define DATA-FIELDS  id_gasto Gasto id_orden_entrega importe
&Scoped-define DATA-FIELDS-IN-gastos_orden_entrega id_gasto ~
id_orden_entrega importe 
&Scoped-Define MANDATORY-FIELDS 
&Scoped-Define APPLICATION-SERVICE 
&Scoped-Define ASSIGN-LIST 
&Scoped-Define DATA-FIELD-DEFS "dGastosOrdenEntrega.i"
&Scoped-define QUERY-STRING-Query-Main FOR EACH gastos_orden_entrega NO-LOCK ~
    BY gastos_orden_entrega.id_gasto INDEXED-REPOSITION
{&DB-REQUIRED-START}
&Scoped-define OPEN-QUERY-Query-Main OPEN QUERY Query-Main FOR EACH gastos_orden_entrega NO-LOCK ~
    BY gastos_orden_entrega.id_gasto INDEXED-REPOSITION.
{&DB-REQUIRED-END}
&Scoped-define TABLES-IN-QUERY-Query-Main gastos_orden_entrega
&Scoped-define FIRST-TABLE-IN-QUERY-Query-Main gastos_orden_entrega


/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME


/* ************************  Function Prototypes ********************** */

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD getGasto dTables  _DB-REQUIRED
FUNCTION getGasto RETURNS CHARACTER
  ( /* parameter-definitions */ )  FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD getImporteGasto dTables  _DB-REQUIRED
FUNCTION getImporteGasto RETURNS DECIMAL
  (piGasto AS INTEGER)  FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD getRowObjectEntries dTables  _DB-REQUIRED
FUNCTION getRowObjectEntries RETURNS CHARACTER
  ( /* parameter-definitions */ )  FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}


/* ***********************  Control Definitions  ********************** */

{&DB-REQUIRED-START}

/* Query definitions                                                    */
&ANALYZE-SUSPEND
DEFINE QUERY Query-Main FOR 
      gastos_orden_entrega SCROLLING.
&ANALYZE-RESUME
{&DB-REQUIRED-END}


/* ************************  Frame Definitions  *********************** */


/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: SmartDataObject
   Allow: Query
   Frames: 0
   Add Fields to: Neither
   Other Settings: PERSISTENT-ONLY COMPILE APPSERVER DB-AWARE
 */

/* This procedure should always be RUN PERSISTENT.  Report the error,  */
/* then cleanup and return.                                            */
IF NOT THIS-PROCEDURE:PERSISTENT THEN DO:
  MESSAGE "{&FILE-NAME} should only be RUN PERSISTENT.":U
          VIEW-AS ALERT-BOX ERROR BUTTONS OK.
  RETURN.
END.

&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW dTables ASSIGN
         HEIGHT             = 1.62
         WIDTH              = 46.6.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _INCLUDED-LIB dTables 
/* ************************* Included-Libraries *********************** */

{src/adm2/data.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME




/* ***********  Runtime Attributes and AppBuilder Settings  *********** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR WINDOW dTables
  VISIBLE,,RUN-PERSISTENT                                               */
/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME


/* Setting information for Queries and Browse Widgets fields            */

&ANALYZE-SUSPEND _QUERY-BLOCK QUERY Query-Main
/* Query rebuild information for SmartDataObject Query-Main
     _TblList          = "industria.gastos_orden_entrega"
     _Options          = "NO-LOCK INDEXED-REPOSITION"
     _OrdList          = "industria.gastos_orden_entrega.id_gasto|yes"
     _FldNameList[1]   > general.gastos_orden_entrega.id_gasto
"id_gasto" "id_gasto" ? ? "integer" ? ? ? ? ? ? yes ? no 7.8 yes
     _FldNameList[2]   > "_<CALC>"
"getGasto()" "Gasto" "Gasto" "x(20)" "character" ? ? ? ? ? ? no ? no 20 no
     _FldNameList[3]   > general.gastos_orden_entrega.id_orden_entrega
"id_orden_entrega" "id_orden_entrega" ? ? "integer" ? ? ? ? ? ? yes ? no 7.8 yes
     _FldNameList[4]   > general.gastos_orden_entrega.importe
"importe" "importe" ? ? "decimal" ? ? ? ? ? ? yes ? no 13.2 yes
     _Design-Parent    is WINDOW dTables @ ( 1.14 , 2.6 )
*/  /* QUERY Query-Main */
&ANALYZE-RESUME

 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK dTables 


/* ***************************  Main Block  *************************** */

  &IF DEFINED(UIB_IS_RUNNING) <> 0 &THEN          
    RUN initializeObject.
  &ENDIF

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE beginTransactionValidate dTables  _DB-REQUIRED
PROCEDURE beginTransactionValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
  DEFINE VARIABLE hLib AS HANDLE     NO-UNDO.
  DEFINE VARIABLE fRaz AS DECIMAL    NO-UNDO.
  DEFINE VARIABLE fImp AS DECIMAL    NO-UNDO.
  
  
  DEFINE VARIABLE hLibCom AS HANDLE.
  RUN libCommonFunctions.p PERSISTENT SET hLibCom.
  hLib = DYNAMIC-FUNCTION('getPersistentLib' IN hLibCom, 'libOrdenEntrega.p').
  DELETE OBJECT hLibCom.
  
  FIND LAST RowObjUpd NO-ERROR.


  
  /*add*/
  FOR EACH rowObjUpd WHERE rowObjUpd.rowMod = "A" OR rowObjUpd.rowMod = "C". 
    fRaz = 1 / DYNAMIC-FUNCTION('getCantPtesOE' IN hLib, rowObjUpd.id_orden_entrega).
    fImp = rowObjUpd.importe * fRaz.
    RUN createGastosItems (rowObjUpd.id_orden_entrega, rowObjUpd.id_gasto, fImp).
    /*reaclcular totales*/
    RUN setTotalesOE IN hLib (rowObjUpd.id_orden_entrega).
  
  END.
  
  /*update*/
  FOR EACH rowObjUpd WHERE rowObjUpd.rowMod = "U". 
    fRaz = 1 / DYNAMIC-FUNCTION('getCantPtesOE' IN hLib, rowObjUpd.id_orden_entrega).
    fImp = rowObjUpd.importe * fRaz.

    /* borro el gasto editado de los items */
    FOR EACH gastos_items_orden_entrega
        WHERE gastos_items_orden_entrega.id_orden_entrega = rowObjUpd.id_orden_entrega
          AND gastos_items_orden_entrega.id_gasto         = rowObjUpd.id_gasto.
      DELETE gastos_items_orden_entrega.
    END.

    FOR EACH items_orden_entrega
        WHERE items_orden_entrega.id_orden_entrega = rowObjUpd.id_orden_entrega
        NO-LOCK.
      CREATE gastos_items_orden_entrega.
      ASSIGN gastos_items_orden_entrega.id_orden_entrega = rowObjUpd.id_orden_entrega
             gastos_items_orden_entrega.ITEM_oe          = items_orden_entrega.ITEM_oe
             gastos_items_orden_entrega.id_gasto         = rowObjUpd.id_gasto
             gastos_items_orden_entrega.importe          = fImp
             .
    END.

    /*reaclcular totales*/
    RUN setTotalesOE IN hLib (rowObjUpd.id_orden_entrega).

  END.
  
  /*delete*/
  FOR EACH rowObjUpd WHERE rowObjUpd.rowMod = "D". 
    FOR EACH gastos_items_orden_entrega
        WHERE gastos_items_orden_entrega.id_orden_entrega = rowObjUpd.id_orden_entrega
          AND gastos_items_orden_entrega.id_gasto         = rowObjUpd.id_gasto.
      DELETE gastos_items_orden_entrega.
    END.
    /*reaclcular totales*/
    RUN setTotalesOE IN hLib (rowObjUpd.id_orden_entrega).

  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE createGastosItems dTables  _DB-REQUIRED
PROCEDURE createGastosItems :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER piOE  AS INTEGER    NO-UNDO.
  DEFINE INPUT  PARAMETER piGas AS INTEGER    NO-UNDO.
  DEFINE INPUT  PARAMETER pfImp AS DECIMAL    NO-UNDO.

  FOR EACH items_orden_entrega
      WHERE items_orden_entrega.id_orden_entrega = piOE
      NO-LOCK.
    CREATE gastos_items_orden_entrega.
    ASSIGN gastos_items_orden_entrega.id_orden_entrega = piOE
           gastos_items_orden_entrega.ITEM_oe          = items_orden_entrega.ITEM_oe
           gastos_items_orden_entrega.id_gasto         = piGas
           gastos_items_orden_entrega.importe          = pfImp
           .

  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE DATA.CALCULATE dTables  DATA.CALCULATE _DB-REQUIRED
PROCEDURE DATA.CALCULATE :
/*------------------------------------------------------------------------------
  Purpose:     Calculate all the Calculated Expressions found in the
               SmartDataObject.
  Parameters:  <none>
------------------------------------------------------------------------------*/
      ASSIGN 
         rowObject.Gasto = (getGasto())
      .

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE disable_UI dTables  _DEFAULT-DISABLE
PROCEDURE disable_UI :
/*------------------------------------------------------------------------------
  Purpose:     DISABLE the User Interface
  Parameters:  <none>
  Notes:       Here we clean-up the user-interface by deleting
               dynamic widgets we have created and/or hide 
               frames.  This procedure is usually called when
               we are ready to "clean-up" after running.
------------------------------------------------------------------------------*/
  /* Hide all frames. */
  IF THIS-PROCEDURE:PERSISTENT THEN DELETE PROCEDURE THIS-PROCEDURE.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE endTransactionValidate dTables  _DB-REQUIRED
PROCEDURE endTransactionValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
FIND LAST RowObjUpd NO-ERROR.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE especialPosUpdate dTables  _DB-REQUIRED
PROCEDURE especialPosUpdate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER hBuffer AS HANDLE NO-UNDO.
DEFINE INPUT PARAMETER  xCase   AS CHARACTER NO-UNDO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE especialPreCreate dTables  _DB-REQUIRED
PROCEDURE especialPreCreate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER xCase AS CHARACTER NO-UNDO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE especialPreUpdate dTables  _DB-REQUIRED
PROCEDURE especialPreUpdate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER hBuffer AS HANDLE    NO-UNDO.
DEFINE INPUT PARAMETER xCase   AS CHARACTER NO-UNDO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE fieldsWithProblems dTables  _DB-REQUIRED
PROCEDURE fieldsWithProblems :
/*------------------------------------------------------------------------------
  Purpose: In this procedure we check all conditions of BUssines Logic that the
  RowObject can give us.Returns a comma separated list in wich each element is a
  pair of field + chr(3)+  color we want to mark as irregular ones
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE OUTPUT PARAMETER cList AS CHARACTER NO-UNDO.


END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE fillGastosOE dTables  _DB-REQUIRED
PROCEDURE fillGastosOE :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER piOE   AS INTEGER    NO-UNDO.
  DEFINE INPUT  PARAMETER pcRows AS CHARACTER  NO-UNDO.

  DEFINE VARIABLE i           AS INTEGER    NO-UNDO.
  DEFINE VARIABLE iOE         AS INTEGER    NO-UNDO.
  DEFINE VARIABLE iGasto      AS INTEGER    NO-UNDO.
  DEFINE VARIABLE iCantPtes   AS INTEGER    NO-UNDO.
  DEFINE VARIABLE cGasto      AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE dImporte    AS DECIMAL    NO-UNDO.
  DEFINE VARIABLE fProporcion AS DECIMAL    NO-UNDO.
  DEFINE VARIABLE cNro        AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE cAnt        AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE cCon        AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE cRow        AS CHARACTER  NO-UNDO.

  FOR FIRST gastos_orden_entrega
      WHERE gastos_orden_entrega.id_orden_entrega = piOE
      NO-LOCK.    
    MESSAGE "Desea Actualizar los Gastos Que ya Existen para esta OE?"
      VIEW-AS ALERT-BOX QUESTION BUTTONS YES-NO UPDATE lChoice AS LOGICAL.
    IF NOT lChoice THEN RETURN.      
  END.

  /*calculo cantidad de partes de la oe*/
  FOR EACH items_orden_entrega
      WHERE items_orden_entrega.id_orden_entrega = piOE
      NO-LOCK.
    iCantPtes = iCantPtes + 1.
  END.

  /*borro gastos si existieran*/
  FOR EACH gastos_orden_entrega
      WHERE gastos_orden_entrega.id_orden_entrega = piOE.
    DELETE gastos_orden_entrega.    
  END.
  
  
  /*creo gastos oe*/
  DO i = 1 TO NUM-ENTRIES(pcRows, CHR(10)).
    cRow = ENTRY(i, pcRows, CHR(10)).
    ASSIGN iOe      = INTEGER(ENTRY(1, cRow, CHR(1)))
           iGasto   = INTEGER(ENTRY(2, cRow, CHR(1)))
           cGasto   = ENTRY(3, cRow, CHR(1))
           dImporte = DECIMAL(ENTRY(4, cRow, CHR(1)))
           cNro     = ENTRY(5, cRow, CHR(1))
           cAnt     = ENTRY(6, cRow, CHR(1))
           cCon     = ENTRY(7, cRow, CHR(1)).

    /*IF dImporte > 0 THEN DO:    */
      CREATE gastos_orden_entrega.
      ASSIGN gastos_orden_entrega.id_orden_entrega = iOE
             gastos_orden_entrega.id_gasto         = iGasto
             gastos_orden_entrega.importe          = dImporte
             .
    /*END.*/
  END.


  /*replico los gastos en los items de la oe proporcionalmente*/
  
  FOR EACH gastos_items_orden_entrega
      WHERE gastos_items_orden_entrega.id_orden_entrega = piOE.
    DELETE gastos_items_orden_entrega.    
  END.
  
  FOR EACH items_orden_entrega 
      WHERE items_orden_entrega.id_orden_entrega = piOE.
    
    /*completo campo items_contratos.precio_origen*/
    FOR FIRST items_contratos
        OF items_orden_entrega 
        NO-LOCK.
      items_orden_entrega.importe_origen = items_contratos.precio_origen.
    END.

    /*calculo proporcion */
    IF items_orden_entrega.contenedores < 1 THEN 
      fProporcion = items_orden_entrega.contenedores.
    ELSE
      fProporcion = 1 / iCantPtes.

    /*replico estructura de gastos en gastos_items*/
    FOR EACH gastos_orden_entrega 
        WHERE gastos_orden_entrega.id_orden_entrega = piOE.

      CREATE gastos_items_orden_entrega.
      ASSIGN gastos_items_orden_entrega.item_oe          = items_orden_entrega.ITEM_oe
             gastos_items_orden_entrega.importe          = gastos_orden_entrega.importe * fProporcion
             gastos_items_orden_entrega.id_orden_entrega = piOE
             gastos_items_orden_entrega.id_gasto         = gastos_orden_entrega.id_gasto
             .
      
    END.
    
  END.

  RELEASE items_orden_entrega.
  
  

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE getField dTables  _DB-REQUIRED
PROCEDURE getField :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER xFieldName AS CHARACTER NO-UNDO.

DEFINE VAR hBuffer AS HANDLE NO-UNDO.
DEFINE VAR hField  AS HANDLE NO-UNDO.

hBuffer = BUFFER RowObject:HANDLE.
IF VALID-HANDLE(hBuffer) THEN
DO:
    hField = hBuffer:BUFFER-FIELD(xFieldName).
    IF VALID-HANDLE(hField) THEN
    DO:
        RETURN hField:BUFFER-VALUE().
    END.
END.

RETURN.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE initializeObject dTables  _DB-REQUIRED
PROCEDURE initializeObject :
/*------------------------------------------------------------------------------
  Purpose:     Super Override
  Parameters:  
  Notes:       
------------------------------------------------------------------------------*/



  /* Code placed here will execute PRIOR to standard behavior. */
  
  RUN SUPER.

  /* Code placed here will execute AFTER standard behavior.    */
  /*
  DEFINE VAR xDataSource AS CHARACTER NO-UNDO.
  {get DataSource xDataSource}.
  IF xDataSource <> ? THEN
  DO:
      {set AutoCommit NO}.
      {set CommitSource xDataSource}.
  END.
  */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE postTransactionValidate dTables  _DB-REQUIRED
PROCEDURE postTransactionValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
FIND LAST RowObjUpd NO-ERROR.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE postUpdate dTables  _DB-REQUIRED
PROCEDURE postUpdate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER hBuffer   AS HANDLE NO-UNDO.
DEFINE VAR hField                AS HANDLE NO-UNDO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE preCreate dTables  _DB-REQUIRED
PROCEDURE preCreate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER hBuffer AS HANDLE NO-UNDO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE preTransactionValidate dTables  _DB-REQUIRED
PROCEDURE preTransactionValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE preUpdate dTables  _DB-REQUIRED
PROCEDURE preUpdate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER hBuffer AS HANDLE NO-UNDO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

/* ************************  Function Implementations ***************** */

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION getGasto dTables  _DB-REQUIRED
FUNCTION getGasto RETURNS CHARACTER
  ( /* parameter-definitions */ ) :
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/
  FIND CURRENT rowObject NO-ERROR.

  FIND FIRST gastos_venta WHERE gastos_venta.id_gasto = rowObject.id_gasto
                          NO-LOCK NO-ERROR.
  IF AVAILABLE gastos_venta THEN
    RETURN gastos_venta.descripcion.
  ELSE
    RETURN "".

END FUNCTION.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION getImporteGasto dTables  _DB-REQUIRED
FUNCTION getImporteGasto RETURNS DECIMAL
  (piGasto AS INTEGER) :
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/
  DEFINE VARIABLE dRet AS DECIMAL    NO-UNDO.
  DEFINE BUFFER buRo FOR rowObject.

  FIND FIRST buRo WHERE buRo.id_gasto = piGasto NO-LOCK NO-ERROR.
  IF AVAILABLE buRo THEN DO:
    dRet = buRo.importe.
  END.


  RETURN dRet.

END FUNCTION.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION getRowObjectEntries dTables  _DB-REQUIRED
FUNCTION getRowObjectEntries RETURNS CHARACTER
  ( /* parameter-definitions */ ) :
/*------------------------------------------------------------------------------
  Purpose:  
    Notes:  
------------------------------------------------------------------------------*/
  DEFINE VARIABLE cRet AS CHARACTER  NO-UNDO.

  DEFINE BUFFER buRo FOR rowObject.

  FOR EACH buRo NO-LOCK.
    cRet = cRet + STRING(buRo.rowNum)   + CHR(1) + 
                  STRING(buRo.id_gasto) + CHR(1) + 
                  STRING(buRo.importe)  + CHR(10).
    
  END.
  cRet = SUBSTRING(cRet, 1, LENGTH(cRet) - 1).

  RETURN cRet.

END FUNCTION.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

